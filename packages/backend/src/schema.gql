# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type APIKey {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  privateKey: String
  description: String!
}

type APIKeyConnection {
  pageInfo: PageInfo!
  edges: [APIKeyEdge!]!
}

type APIKeyEdge {
  node: APIKey!

  """Used in `before` and `after` args"""
  cursor: ID!
}

type Application {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  createdBy: User
  organization: Organization!
  components: [Component!]!
  component(id: ID!): Component!
  environments: [Environment!]!
}

type Component {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  deploymentStrategy: DeploymentStrategy!
  image: String!
  containerGroups: [ContainerGroup!]!
  monthlyPrice: Int!
  containerGroup(environment: ID!): ContainerGroup
}

type ContainerGroup {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  size: ContainerSize!
  containerCount: Float!
  environment: Environment!
  component: Component!
  secrets: [Secret!]!
  monthlyPrice: Int!
}

enum ContainerSize {
  S1x1
  S2x2
  S4x4
  S8x8
  S16x16
}

input CreateApplicationInput {
  organizationID: ID!
  name: String!
  description: String
}

input CreateComponentInput {
  applicationID: ID!
  image: String!
  name: String!
  deploymentStrategy: DeploymentStrategy!
}

input CreateContainerGroupInput {
  componentID: ID!
  environmentID: ID!
  size: ContainerSize!
  containerCount: Int!
}

input CreateEnvironmentInput {
  organizationID: ID!
  name: String!
  label: String!
}

input CreateSecretInput {
  containerGroupID: ID!
  key: String!
  value: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DeleteApplicationInput {
  applicationID: ID!
}

input DeleteComponentInput {
  componentID: ID!
}

input DeleteSecretInput {
  secretID: ID!
}

enum DeploymentStrategy {
  REPLACE
  RECREATE
}

input DisableTOTPInput {
  password: String!
}

input EnableTOTPInput {
  secret: String!
  token: String!
}

type Environment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  label: String!
  organization: Organization!
}

type ExternalEntity {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Mutation {
  createAPIKeyRequest: String!
  grantAPIKey(uuid: String!): Result!
  createAPIKey(description: String!): APIKeyEdge!
  deleteAPIKey(id: ID!): APIKey!
  createApplication(input: CreateApplicationInput!): Application!
  deleteApplication(input: DeleteApplicationInput!): Application!
  updateApplication(input: UpdateApplicationInput!): Application!
  deleteComponent(input: DeleteComponentInput!): Component!
  createComponent(input: CreateComponentInput!): Component!
  createContainerGroup(input: CreateContainerGroupInput!): ContainerGroup!
  createEnvironment(input: CreateEnvironmentInput!): Environment!
  UNIMPLEMENTED__changeOrganizationUsername: Organization!
  createSecret(input: CreateSecretInput!): Secret!
  updateSecret(input: UpdateSecretInput!): Secret!
  deleteSecret(input: DeleteSecretInput!): Secret!
  exchangeTOTP(token: String!): Result!
  enableTOTP(input: EnableTOTPInput!): User!
  disableTOTP(input: DisableTOTPInput!): User!
  signUp(password: String!, email: String!, name: String!, username: String!): Result!
  signIn(password: String!, email: String!): SignInResult!
  gitHubSignIn(code: String!): SignInResult!
  updateAccount(email: String, name: String, username: String): User!
  forgotPassword(email: String!): Result!
  resetPassword(password: String!, uuid: String!): Result!
  signOut: Result!
}

type Network {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type Notification {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  body: String!
}

type Organization {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPersonal: Boolean!
  username: String!
  name: String!
  maxComputeUnits: Float!
  applications: [Application!]!
  environments: [Environment!]!
  application(name: String!): Application!
  memberCount: Int!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
  endCursor: ID
}

type Query {
  getAPIKeyFromRequest(uuid: String!): String
  application(id: ID!): Application!
  component(id: ID!): Component!
  estimateMonthlyPrice(count: Int!, size: ContainerSize!): Int!
  notifications: [Notification!]!
  organization(
    """
    The username of the organization to load. If empty, we will use the signed-in users personal organization.
    """
    username: String
  ): Organization!
  viewer: User!
}

"""Provides a boolean to determine if the action was successful or not."""
type Result {
  ok: Boolean!
}

type Secret {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  value: String!
}

"""
A special type of result used just for SignIns. Provides a boolean for if the
user requires a TOTP exchange before being fully logged in.
"""
type SignInResult {
  ok: Boolean!
  requiresTOTP: Boolean!
}

input UpdateApplicationInput {
  applicationID: ID!
  name: String
  description: String
}

input UpdateComponentInput {
  componentID: ID!
  image: String
  name: String
  deploymentStrategy: DeploymentStrategy
}

input UpdateSecretInput {
  secretID: ID!
  key: String!
  value: String!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  username: String!
  email: String!
  personalOrganization: Organization!
  onboardTOTP: String!
  hasTOTP: Boolean!
  apiKeys(
    """Paginate before opaque cursor"""
    before: ID

    """Paginate after opaque cursor"""
    after: ID

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): APIKeyConnection!
  organizations: [Organization!]!
}
