# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type APIKey {
  id: Int!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Application {
  id: Int!
  name: String!
  description: String!
  createdBy: User
  createdAt: DateTime!
  updatedAt: DateTime!
  organization: Organization!
  components: [Component!]!
  component(id: Int!): Component!
  environments: [Environment!]!
}

input ApplicationInput {
  name: String
  description: String
}

type ApplicationMutations {
  delete: Application!
  update(application: ApplicationInput!): Application!
  createComponent(component: ComponentInput!): Component!
  updateComponent(image: String!, id: Int!): Component!
  setSecret(value: String!, key: String!, id: Int!): Secret!
  deleteComponent(id: Int!): Component!
}

type Component {
  id: Int!
  name: String!
  deploymentStrategy: DeploymentStrategy!
  image: String!
  secrets: [Secret!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  containerGroup: ContainerGroup!
}

input ComponentInput {
  image: String!
  name: String!
  deploymentStrategy: DeploymentStrategy!
  size: ContainerSize!
  containerCount: Int!
  environmentID: Int!
}

type Container {
  id: Int!
  status: String!
}

type ContainerGroup {
  id: Int!
  size: ContainerSize!
  containerCount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  environment: Environment!
  component: Component!
  containers: [Container!]!
}

input ContainerGroupInput {
  label: String!
  deploymentID: Int!
  size: ContainerSize!
  number: Int!
}

enum ContainerSize {
  S1x1
  S2x2
  S4x4
  S8x8
  S16x16
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

enum DeploymentStrategy {
  REPLACE
  RECREATE
}

type Environment {
  id: Int!
  name: String!
  organization: Organization!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Mutation {
  createAPIKeyRequest: String!
  grantAPIKey(uuid: String!): Result!
  createAPIKey(description: String!): String!
  deleteAPIKey(id: Int!): Result!
  application(id: Int!): ApplicationMutations!
  organization(
    """
    The ID of the organization that you will be performing mutations on. If
    empty, we will use the signed-in users personal organization.
    """
    id: Int
  ): OrganizationMutations!
  exchangeTOTP(token: String!): Result!
  enableTotp(token: String!, secret: String!): Result!
  disableTotp(password: String!): Result!
  signUp(password: String!, email: String!, name: String!, username: String!): Result!
  signIn(password: String!, email: String!): SignInResult!
  gitHubSignIn(code: String!): SignInResult!
  updateAccount(email: String, name: String): User!
  forgotPassword(email: String!): Result!
  resetPassword(password: String!, uuid: String!): Result!
  signOut: Result!
}

type Network {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Notification {
  id: Int!
  title: String!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Organization {
  id: Int!
  isPersonal: Boolean!
  username: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  applications: [Application!]!
  environments: [Environment!]!
}

type OrganizationMutations {
  createEnvironment(name: String!): Environment!
  createApplication(application: ApplicationInput!): Application!
}

type Query {
  getAPIKeyFromRequest(uuid: String!): String
  application(id: Int!): Application!
  notifications: [Notification!]!
  organization(
    """
    The ID of the organization to load. If empty, we will use the signed-in users personal organization.
    """
    id: Int
  ): Organization!
  me: User!
}

"""Provides a boolean to determine if the action was successful or not."""
type Result {
  ok: Boolean!
}

type Secret {
  id: Int!
  key: String!
  value: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SecretInput {
  key: String!
  value: String!
}

"""
A special type of result used just for SignIns. Provides a boolean for if the
user requires a TOTP exchange before being fully logged in.
"""
type SignInResult {
  ok: Boolean!
  requiresTOTP: Boolean!
}

type User {
  id: Int!
  githubID: Int
  name: String!
  username: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  hasTOTP: Boolean!
  personalOrganization: Organization!
  apiKeys: [APIKey!]!
  onboardTOTP: String!
  organizations: [Organization!]!
}
